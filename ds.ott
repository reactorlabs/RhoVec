metavar termvar, x ::= {{ tex \mathit{[[termvar]]} }} {{ com metavariables }}

metavar num ::= {{ lex numeral  }} {{ com numbers }}
metavar str ::= {{ lex alphanum }} {{ com strings }}

indexvar n ::= {{ com index variables }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
grammar

%%% Expressions %%%
e :: 'e_' ::=                               {{ com expressions }}
  | lit                   :: :: Lit           {{ com literal     }}
  | Vec ( e1 , .. , en )  :: :: VecCtor       {{ com vector ctor }}
  | v                     :: :: Val           {{ com value       }}

%%% LITERALS %%%
lit :: 'lit_' ::=                           {{ com literals }}
  | num                   :: :: Int           {{ com integer }}

%%% VALUES %%%
v :: 'v_' ::=                               {{ com values }}
  | [ lit1 .. litn ] , T  :: :: Vec           {{ com vector }}

%%% TYPES %%%
T :: 'T_' ::=                               {{ com types }}
  | Int                   :: :: Int           {{ com integer }}

%%% TERMINALS %%%
terminals :: 'terminals_' ::=
  | -->       :: :: reduce     {{ tex \longrightarrow }}

%%% FORMULAS %%%
formula :: 'formula_' ::=
  | judgement               :: :: judgement
  | formula1 .. formulan    :: :: dots


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
defns
OperationalSemantics :: '' ::=

  defn
  e1 --> e2 :: :: reduce :: E_ {{ com $[[e1]]$ reduces to $[[e2]]$ }} by

    ------------------- :: LitCtor
    num --> [ num ],Int

    e1 --> num1 .. en --> numn
    -------------------------------------- :: VecCtor
    Vec(e1, .., en) --> [num1 .. numn],Int

